type Usuario
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, provider: apiKey, operations: [create, read] }
      { allow: private, operations: [create, read] }
    ]
  ) {
  id: ID!
  nickname: String
  nombre: String
  materno: String
  paterno: String
  email: String
  foto: String
  imagenFondo: String
  phoneNumber: String
  phoneCode: String
  organizador: Boolean
  admin: Boolean
  idUploaded: Boolean
  idData: AWSJSON
  idKey: String
  fechaNacimiento: String
  calificacion: Float
  numResenas: Int
  notificationToken: String

  verified: Boolean

  Eventos: [Evento] @hasMany(indexName: "byUsuario", fields: ["id"])
  Reservas: [Reserva] @hasMany(indexName: "byUsuario", fields: ["id"])
}

type Evento
  @model
  @auth(
    rules: [
      { allow: owner }
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  imagenes: [String!]!
  imagenPrincipalIDX: Int!
  titulo: String!
  detalles: String
  ubicacion: AWSJSON!
  fechaInicial: AWSTimestamp!
  fechaFinal: AWSTimestamp!
  tosAceptance: AWSJSON!
  tipoLugar: placeEnum!
  musica: musicEnum!
  comodities: [comoditiesEnum!]
  musOtra: String

  personasReservadas: Int
  personasMax: Int

  precioMin: Int!
  precioMax: Int!

  CreatorID: ID! @index(name: "byUsuario")

  Boletos: [Boleto!] @hasMany(indexName: "byEvento", fields: ["id"])
  Reservas: [Reserva] @hasMany(indexName: "byEvento", fields: ["id"])
}

type Boleto
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!

  titulo: String!
  descripcion: String

  cantidad: Int!
  personasReservadas: Int

  precio: Float!

  eventoID: ID! @index(name: "byEvento")
  Reservas: [Reserva] @hasMany(indexName: "byBoleto", fields: ["id"])
}

type Cupon
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  # ID en mayusuculas
  id: ID!

  restantes: Int!
  vencimiento: AWSTimestamp!

  # Numero menor a 1
  porcentajeDescuento: Float

  cantidadDescuento: Float

  Reservas: [Reserva!] @hasMany(indexName: "byCupon", fields: ["id"])
}

type Reserva
  @model
  @auth(
    rules: [
      { allow: owner }
      { allow: public, provider: apiKey, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  total: Float!
  precioIndividual: Float!
  comision: Float!
  pagadoAlOrganizador: Float!
  tituloBoleto: String!
  descripcionBoleto: String
  cantidad: Int!
  pagoID: String
  ingreso: Boolean
  horaIngreso: AWSDateTime
  cancelado: Boolean
  canceledAt: AWSDateTime
  cancelReason: reservaCancelReason

  eventoID: ID! @index(name: "byEvento")
  usuarioID: ID! @index(name: "byUsuario")
  boletoID: ID! @index(name: "byBoleto")
  cuponID: ID! @index(name: "byCupon")

  organizadorID: ID
}

enum reservaCancelReason {
  EVENTOCERRADO
  CANCELADOPORCLIENTE
}

enum placeEnum {
  EXTERIOR
  INTERIOR
  MIXTO
}

enum musicEnum {
  REGGETON
  POP
  TECNO
  RAP
  BANDA
  ROCK
  OTRO
}

enum comoditiesEnum {
  DJ
  ALBERCA
  BARRALIBRE
  COMIDA
  SEGURIDAD
}
