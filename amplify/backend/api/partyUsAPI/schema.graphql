type Usuario
  @model
  @auth(
    rules: [
      { allow: owner, ownerField: "owner" }
      { allow: groups, groups: ["Admin"] }
      # Autorizaciones publicas
      { allow: public, provider: apiKey, operations: [create, read] }
      { allow: public, provider: iam, operations: [create, read] }
      # Autenticado
      { allow: private, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
    ]
  ) {
  id: ID!
  nickname: String
  nombre: String
  materno: String
  paterno: String
  email: String
  foto: String

  cuentaBancaria: String
  titularCuenta: String

  receiveNewReservations: Boolean

  imagenFondo: String
  direccion: AWSJSON
    @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }])
  phoneNumber: String
    @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }])
  phoneCode: String
  organizador: Boolean

  admin: Boolean
    @auth(
      rules: [
        # Solo admins pueden cambiar este atributo
        { allow: groups, groups: ["Admin"] }
        #
        # Todos los demas pueden leerlo
        { allow: public, provider: apiKey, operations: [read] }
        { allow: public, provider: iam, operations: [read] }
        # Privado
        { allow: private, provider: iam, operations: [read] }
        { allow: private, operations: [read] }
      ]
    )
  idUploaded: Boolean
  idData: AWSJSON
    @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }])
  idKey: String
  fechaNacimiento: String
  calificacion: Float
  numResenas: Int
  notificationToken: String
  userPaymentID: String
  verified: Boolean
    @auth(
      rules: [
        # Solo admins pueden cambiar este atributo
        { allow: groups, groups: ["Admin"] }
        #
        # Todos los demas pueden leerlo
        { allow: public, provider: apiKey, operations: [read] }
        { allow: public, provider: iam, operations: [read] }
        # Privado
        { allow: private, provider: iam, operations: [read] }
        { allow: private, operations: [read] }
      ]
    )

  owner: ID

  Eventos: [Evento] @hasMany(indexName: "byUsuario", fields: ["id"])
  Reservas: [Reserva] @hasMany(indexName: "byUsuario", fields: ["id"])
}

type Evento
  @model
  @auth(
    rules: [
      # Todos los demas solo pueden verlos
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      #
      { allow: private, provider: iam }
      # El due単o es el unico que puede moverle a sus eventos
      { allow: owner, ownerField: "CreatorID" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID
  imagenes: [String]
  imagenPrincipalIDX: Int
  titulo: String
  detalles: String
  ubicacion: AWSJSON
  fechaInicial: AWSTimestamp
  fechaFinal: AWSTimestamp
  tosAceptance: AWSJSON
  tipoLugar: placeEnum
  musica: musicEnum
  comodities: [comoditiesEnum]
  musOtra: String

  personasReservadas: Int
  personasMax: Int

  precioMin: Int
  precioMax: Int

  CreatorID: ID @index(name: "byUsuario")
  creator: Usuario @belongsTo

  Boletos: [Boleto] @hasMany(indexName: "byEvento", fields: ["id"])
  Reservas: [Reserva] @hasMany(indexName: "byEvento", fields: ["id"])
}

type Notificacion
  @model
  @auth(
    rules: [
      # Solo el due単o/private puede leerlas y crear mas
      { allow: owner, ownerField: "usuarioID" }
      #
      # Cualquiera con API key puede crear una notificacion
      { allow: public, provider: apiKey, operations: [create] }
      { allow: public, provider: iam, operations: [create] }
      { allow: groups, groups: ["Admin"] }
      #
      # Permitir crear la notificacion desde lambda
      { allow: private, provider: iam }
    ]
  ) {
  id: ID!

  tipo: TipoNotificacion!
  titulo: String!
  descripcion: String
  usuarioID: ID! @index(name: "byUsuario")

  leido: Boolean
  showAt: AWSDateTime

  reservaID: ID
  eventoID: ID
  organizadorID: ID
}

type Boleto
  @model
  @auth(
    rules: [
      # El due単o puede hacer lo que quiera con los boletos
      { allow: owner }
      #
      # Los demas solo pueden leer el boleto
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      { allow: private, operations: [read] }
      { allow: private, provider: iam }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID

  titulo: String
  descripcion: String

  cantidad: Int
  personasReservadas: Int
  precio: Float

  eventoID: ID @index(name: "byEvento")
  Reservas: [ReservasBoletos] @hasMany(indexName: "byBoletos", fields: ["id"])
}

type Cupon
  @model
  @auth(
    rules: [
      # Solo admins pueden crear cupones
      { allow: groups, groups: ["Admin"] }
      #
      # Todos los demas pueden query
      # Publico
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      # Privado
      { allow: private, operations: [read] }
      { allow: private, provider: iam, operations: [read, update] }
    ]
  ) {
  # ID en mayusuculas
  id: ID!

  restantes: Int!
  vencimiento: AWSTimestamp!

  # Numero menor a 1
  porcentajeDescuento: Float

  cantidadDescuento: Float

  Reservas: [Reserva!] @hasMany(indexName: "byCupon", fields: ["id"])
}

type Retiro
  @model
  @auth(
    rules: [
      # Todos los demas pueden ver el retiro de fondos del organizador
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      # Autenticado
      { allow: private, operations: [read] }
      #
      #
      # Solo los admins pueden editarlo y modificarlo
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID

  organizadorID: String!
  amount: Float!
  adminID: String!

  feeID: String
  transferID: String

  mensaje: String

  Reservas: [Reserva] @hasMany(indexName: "byRetiro", fields: ["id"])
}

type Reserva
  @model
  @auth(
    rules: [
      # Todos los demas pueden ver la reserva
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      # Autenticado
      { allow: private, operations: [read] }
      #
      # Solo lambda puede crear reserva
      { allow: private, provider: iam }
      #
      # El due単o del evento puede ingresar la reserva
      { allow: owner, ownerField: "organizadorID", operations: [update] }
      #
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID
  total: Float
  comision: Float
  pagadoAlOrganizador: Float
  cantidad: Int

  pagado: Boolean
  paymentTime: AWSDateTime

  transaccionAOrganizadorID: ID @index(name: "byRetiro")
  transaccionAOrganizador: Retiro @belongsTo

  tipoPago: tipoPago

  # Tipos de cargo para el evento
  chargeID: String
  transactionID: String
  feeID: String

  cashBarcode: String
  cashReference: String

  ingreso: Boolean
  horaIngreso: AWSDateTime

  cancelado: Boolean
  canceledAt: AWSDateTime
  cancelReason: reservaCancelReason
  fechaExpiracionUTC: AWSDateTime

  eventoID: ID @index(name: "byEvento")
  evento: Evento @belongsTo

  usuarioID: ID @index(name: "byUsuario")
  usuario: Usuario @belongsTo

  cuponID: ID @index(name: "byCupon")
  cupon: Cupon @belongsTo

  Boletos: [ReservasBoletos] @hasMany(indexName: "byReserva", fields: ["id"])

  organizadorID: ID
}

########################################################
###################TABLAS MANY TO MANY##################
########################################################
type ReservasBoletos
  @model
  @auth(
    rules: [
      # Solo lambda puede crear reserva
      { allow: private, provider: iam }
      #
      # Todos los demas pueden ver la reserva
      # Publico
      { allow: public, provider: apiKey, operations: [read] }
      { allow: public, provider: iam, operations: [read] }
      # Privado
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID

  boletoID: ID @index(name: "byBoletos")
  reservaID: ID @index(name: "byReserva")

  reserva: Reserva @belongsTo
  boleto: Boleto @belongsTo
  quantity: Int
}

enum reservaCancelReason {
  EVENTOCERRADO
  CANCELADOPORCLIENTE
}

enum tipoPago {
  EFECTIVO
  TARJETA
}

enum placeEnum {
  EXTERIOR
  INTERIOR
  MIXTO
}

enum musicEnum {
  REGGAETON
  POP
  TECHNO
  RAP
  BANDA
  ROCK
  OTRO
}

enum comoditiesEnum {
  DJ
  ALBERCA
  BARRALIBRE
  COMIDA
  SEGURIDAD
}

enum TipoNotificacion {
  RESERVATARJETACREADA
  RESERVAEFECTIVOCREADA
  RESERVACANCELADA

  RESERVAEFECTIVOPAGADA

  ADMIN
  BIENVENIDA

  EVENTOCREADO
  EVENTOACTUALIZACION
  EVENTOCANCELADO

  RESERVAENEVENTO

  RECORDATORIOEVENTO
  RECORDATORIOPAGO

  CALIFICAUSUARIO
}
